import matplotlib.pylab as plt

def main():
    class_counts_original = {
        0: 168, 
        1: 185, 
        2: 184, 
        3: 140, 
        4: 159, 5: 142, 6: 160, 7: 192, 8: 184, 9: 137, 10: 166, 11: 170, 12: 171, 13: 155, 14: 184, 15: 175, 16: 163, 17: 198, 18: 169, 19: 138, 20: 160, 21: 184, 22: 144, 23: 152, 24: 192, 25: 135, 26: 139, 27: 149, 28: 159, 29: 158, 30: 155, 31: 144, 32: 155, 33: 144, 34: 159, 35: 158, 36: 157, 37: 193, 38: 169, 39: 161, 40: 146, 41: 225, 42: 195, 43: 192, 44: 159, 45: 195, 46: 169, 47: 173, 48: 146, 49: 141, 50: 142, 51: 170, 52: 155, 53: 165, 54: 157, 55: 137, 56: 142, 57: 170, 58: 168, 59: 199, 60: 171, 61: 158, 62: 173, 63: 163, 64: 137, 65: 141, 66: 137, 67: 148, 68: 165, 69: 147, 70: 149, 71: 159, 72: 156, 73: 147, 74: 161, 75: 177, 76: 137, 77: 167, 78: 136, 79: 186, 80: 178, 81: 160, 82: 169, 83: 170, 84: 168, 85: 150, 86: 140, 87: 193, 88: 161, 89: 138, 90: 142, 91: 173, 92: 139, 93: 149, 94: 158, 95: 160, 96: 178, 97: 200, 98: 175, 99: 190, 100: 172, 101: 191, 102: 203, 103: 155, 104: 162, 105: 159, 106: 165, 107: 157, 108: 159, 109: 188, 110: 182, 111: 197, 112: 159, 113: 168, 114: 189, 115: 160, 116: 148, 117: 165, 118: 160, 119: 182, 120: 167, 121: 157, 122: 165, 123: 166, 124: 202, 125: 165, 126: 190, 127: 159, 128: 138, 129: 154, 130: 160, 131: 142, 132: 138, 133: 167, 134: 218, 135: 165, 136: 185, 137: 168, 138: 158, 139: 142, 140: 137, 141: 175, 142: 170, 143: 149, 144: 167, 145: 146, 146: 172, 147: 167, 148: 167, 149: 166, 150: 187, 151: 166, 152: 168, 153: 171, 154: 182, 155: 177, 156: 144, 157: 182, 158: 162, 159: 138, 160: 166, 161: 166, 162: 146, 163: 201, 164: 149, 165: 149, 166: 140, 167: 144, 168: 165, 169: 160, 170: 157, 171: 147, 172: 168, 173: 157, 174: 169, 175: 186, 176: 161, 177: 202, 178: 159, 179: 203, 180: 168, 181: 167, 182: 143, 183: 142, 184: 238, 185: 164, 186: 141, 187: 208, 188: 151, 189: 144, 190: 153, 191: 190, 192: 171, 193: 162, 194: 195, 195: 144, 196: 145, 197: 159, 198: 159, 199: 139, 200: 157, 201: 195, 202: 165, 203: 162, 204: 155, 205: 210, 206: 144, 207: 162, 208: 149, 209: 167, 210: 144, 211: 157, 212: 168, 213: 170, 214: 171, 215: 135, 216: 159, 217: 140, 218: 143, 219: 149, 220: 165, 221: 159, 222: 141, 223: 155, 224: 155, 225: 155, 226: 157, 227: 155, 228: 167, 229: 182, 230: 177, 231: 164, 232: 214, 233: 158, 234: 147, 235: 160, 236: 143, 237: 180, 238: 136, 239: 164, 240: 145, 241: 181, 242: 140, 243: 163, 244: 155, 245: 164, 246: 163, 247: 160, 248: 157, 249: 160, 250: 169, 251: 165, 252: 194, 253: 149, 254: 168, 255: 174, 256: 143, 257: 170, 258: 154, 259: 162, 260: 208, 261: 189, 262: 145, 263: 161, 264: 181, 265: 159, 266: 164, 267: 204, 268: 148, 269: 163, 270: 160, 271: 167, 272: 142, 273: 167, 274: 167, 275: 168, 276: 156, 277: 139, 278: 180, 279: 165, 280: 172, 281: 165, 282: 165, 283: 155, 284: 156, 285: 160, 286: 140, 287: 160, 288: 162, 289: 178, 290: 154, 291: 253, 292: 160, 293: 170, 294: 164, 295: 146, 296: 149, 297: 168, 298: 136, 299: 191, 300: 188, 301: 155, 302: 158, 303: 157, 304: 166, 305: 154, 306: 161, 307: 160, 308: 148, 309: 164, 310: 209, 311: 167, 312: 163, 313: 169, 314: 168, 315: 149, 316: 159, 317: 180, 318: 175, 319: 141, 320: 143, 321: 202, 322: 148, 323: 165, 324: 211, 325: 162, 326: 159, 327: 143, 328: 205, 329: 180, 330: 195, 331: 165, 332: 173, 333: 147, 334: 159, 335: 168, 336: 148, 337: 164, 338: 140, 339: 159, 340: 142, 341: 202, 342: 188, 343: 137, 344: 136, 345: 192, 346: 214, 347: 159, 348: 213, 349: 158, 350: 146, 351: 159, 352: 162, 353: 190, 354: 160, 355: 144, 356: 142, 357: 159, 358: 165, 359: 161, 360: 145, 361: 201, 362: 135, 363: 158, 364: 164, 365: 187, 366: 165, 367: 197, 368: 137, 369: 162, 370: 213, 371: 157, 372: 166, 373: 238, 374: 212, 375: 168, 376: 165, 377: 197, 378: 181, 379: 160, 380: 166, 381: 135, 382: 161, 383: 161, 384: 193, 385: 159, 386: 159, 387: 205, 388: 145, 389: 171, 390: 190, 391: 158, 392: 158, 393: 165, 394: 159, 395: 178, 396: 214, 397: 157, 398: 145, 399: 198, 400: 202, 401: 151, 402: 217, 403: 141, 404: 196, 405: 158, 406: 172, 407: 172, 408: 165, 409: 138, 410: 205, 411: 174, 412: 164, 413: 177, 414: 207, 415: 135, 416: 157, 417: 167, 418: 169, 419: 157, 420: 165, 421: 137, 422: 202, 423: 179, 424: 198, 425: 144, 426: 157, 427: 147, 428: 191, 429: 140, 430: 168, 431: 165, 432: 161, 433: 268, 434: 194, 435: 158, 436: 156, 437: 161, 438: 174, 439: 202, 440: 159, 441: 165, 442: 143, 443: 162, 444: 137, 445: 180, 446: 169, 447: 165, 448: 195, 449: 180, 450: 137, 451: 166, 452: 135, 453: 192, 454: 205, 455: 165, 456: 166, 457: 149, 458: 155, 459: 189, 460: 157, 461: 166, 462: 165, 463: 140, 464: 201, 465: 148, 466: 149, 467: 165, 468: 174, 469: 159, 470: 190, 471: 221, 472: 146, 473: 141, 474: 166, 475: 136, 476: 192, 477: 160, 478: 159, 479: 141, 480: 170, 481: 186, 482: 144, 483: 159, 484: 142, 485: 168, 486: 161, 487: 160, 488: 198, 489: 195, 490: 157, 491: 187, 492: 160, 493: 156, 494: 206, 495: 180, 496: 206, 497: 167, 498: 168, 499: 174, 500: 177, 501: 143, 502: 147, 503: 143, 504: 166, 505: 159, 506: 158, 507: 164, 508: 181, 509: 165, 510: 180, 511: 169, 512: 158, 513: 200, 514: 160, 515: 219, 516: 216, 517: 199, 518: 198, 519: 159, 520: 207, 521: 160, 522:164,523:175
        }
    class_counts_undersampled = {
        k:min(class_counts_original.values()) for k in range(524)
    }
    plot_histogram(class_counts_original)

def plot_histogram(class_counts):
    # Extract class names and counts
    classes = list(class_counts.keys())
    counts = list(class_counts.values())

    # Find the minimum count
    min_count = min(counts)
    max_count = max(counts)
    avg_count = sum(counts) / len(counts) if counts else 0

    # Create the histogram
    plt.bar(classes, counts, color='blue')

    # Add a dotted line at the minimum value
    plt.axhline(y=min_count, 
                color='g', 
                linestyle='-',
                linewidth=2.5,
                label=f'Minimum amount {min_count}')
    plt.axhline(y=avg_count, 
                color='black', 
                linestyle='dotted',
                linewidth=2.5,
                label=f'Average amount {avg_count:.0f}')
    plt.axhline(y=max_count, 
                color='r', 
                linestyle='-',
                linewidth=2.5,
                label=f'Maximum amount {max_count}')

    # Adding labels and title
    plt.xlabel('Class Label')
    plt.ylabel('Image Counts')
    plt.title('Histogram of Image Counts per Class Label')
    plt.legend()
    # Display the plot
    plt.show()

def plot_grouped_histogram(class_counts):
    # Group classes by count
    grouped_counts = {}
    for class_name, count in class_counts.items():
        if count not in grouped_counts:
            grouped_counts[count] = 0
        grouped_counts[count] += 1

    # Sort the groups by amount (key) in ascending order
    sorted_items = grouped_counts.items() #sorted(grouped_counts.items(), key=lambda x: x[0])
    amounts = [item[0] for item in sorted_items]
    class_group_counts = [item[1] for item in sorted_items]

    # Plotting
    plt.bar(range(len(amounts)), amounts, tick_label=[f'{cnt}' for cnt in class_group_counts])

    # Find the minimum count
    min_count = min(amounts)

    # Add a dotted line at the minimum value
    plt.axhline(y=min_count, color='r', linestyle='dotted', label='Minimum amount')

    # Adding labels and title
    plt.xlabel('Number of Classes in Each Group')
    plt.ylabel('Image Counts')
    plt.title('Histogram of Grouped Image Counts per Class Sorted in Ascending Order')
    plt.xticks(rotation=0,fontsize=8)  # Rotate class labels for better visibility

    # Add legend
    plt.legend()

    # Display the plot
    plt.show()

if __name__ =='__main__':
    main()